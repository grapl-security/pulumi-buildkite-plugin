#!/usr/bin/env bash

set -euo pipefail

# shellcheck source-path=SCRIPTDIR
source "$(dirname "${BASH_SOURCE[0]}")/../lib/log.sh"
# shellcheck source-path=SCRIPTDIR
source "$(dirname "${BASH_SOURCE[0]}")/../lib/pulumi.sh"

readonly default_command=preview
readonly command="${BUILDKITE_PLUGIN_PULUMI_COMMAND:-${default_command}}"
readonly valid_commands=(
    preview
    update
)

readonly project_dir="${BUILDKITE_PLUGIN_PULUMI_PROJECT_DIR}"
readonly stack="${BUILDKITE_PLUGIN_PULUMI_STACK}"

# coerce to string
readonly default_refresh_bool=1
readonly refresh_bool="${BUILDKITE_PLUGIN_PULUMI_REFRESH:-${default_refresh_bool}}"
refresh=$([[ $refresh_bool = 1 ]] && echo "true" || echo "false")
readonly refresh

extra_args=()

# Resolve Policy Pack
########################################################################
if [ -n "${BUILDKITE_PLUGIN_PULUMI_POLICY_PACK:-}" ]; then
    # Since we run `pulumi` with the `--cwd` option, any relative path
    # for a policy pack must be resolved relative to the *project*
    # directory, as opposed to the repository root. However,
    # specifying all paths as relative to the root provides a better
    # and more consistent user experience for users of this
    # plugin. Thus, we take on this little bit of work rather than
    # foist it onto users.
    relative_policy_path="$(realpath --relative-to="${project_dir}" "${BUILDKITE_PLUGIN_PULUMI_POLICY_PACK}")"
    extra_args+=("--policy-pack=${relative_policy_path}")
fi

should_run() {
    for valid in "${valid_commands[@]}"; do
        if [ "${command}" == "${valid}" ]; then
            return 0
        fi
    done
    return 1
}
if ! should_run; then
    echo "--- :pulumi: Unrecognized command: '${command}'!"
    echo "Please use one of the following: ${valid_commands[*]}"
    exit 1
fi

########################################################################
# For now, we'll assume that anything using this plugin is sticking to
# our pattern of using Pants to manage the Python virtualenv for our
# Pulumi project(s), and (additionally) using our
# `build-support/manage_virtualenv.sh` script to do it.
#
# We're invoking the logic using a separate script to make mocking
# easy in tests of the plugin. The VIRTUAL_ENV manipulations afterward
# are to eliminate the need to `source` an `activate` file that
# doesn't exist (during tests).
echo -e "--- :python: Installing dependencies"
PATH=${PATH}:"$(dirname "${BASH_SOURCE[0]}")/../bin/"
pants_venv_setup
export VIRTUAL_ENV=build-support/venv
PATH="$(pwd)/${VIRTUAL_ENV}/bin":${PATH}
export PATH
########################################################################

echo -e "--- :pulumi: Log in"
log_and_run pulumi login

project="$(project_name "${project_dir}" "${stack}")"
readonly project

# The default for this is `true`, which was set to reduce unnecessary
# network calls, but is actually useful to have in AWS! This lets us
# get credentials from the IMDS.
#
# While it *technically* means that our configuration is not precisely
# what is in version control, it's a configuration that doesn't
# actually have any impact on the infrastructure being created.
#
# For further background, see:
# https://github.com/pulumi/pulumi-aws/pull/1288
# https://github.com/pulumi/pulumi-aws/issues/1636
log_and_run pulumi config set \
    aws:skipMetadataApiCheck false \
    --cwd="${project_dir}" \
    --stack="${stack}"

case "${command}" in
    preview)
        echo -e "--- :pulumi: Previewing changes to ${project} + ${stack} infrastructure"
        log_and_run pulumi preview \
            --cwd="${project_dir}" \
            --stack="${stack}" \
            --show-replacement-steps \
            --non-interactive \
            --refresh="${refresh}" \
            --diff \
            "${extra_args[@]}" \
            --message="Previewing from ${BUILDKITE_BUILD_URL}"
        ;;
    update)
        echo -e "--- :pulumi: Updating ${project} + ${stack} infrastructure"
        log_and_run pulumi update \
            --cwd="${project_dir}" \
            --stack="${stack}" \
            --show-replacement-steps \
            --non-interactive \
            --refresh="${refresh}" \
            --diff \
            --yes \
            "${extra_args[@]}" \
            --message="Updating from ${BUILDKITE_BUILD_URL}"
        ;;
    *)
        echo "--- :pulumi: Error in command script - unhandled command: '${command}'!"
        echo "Please report this as a bug"
        exit 1
        ;;
esac
